// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(FAPDbContext))]
    [Migration("20231017082515_Ver2")]
    partial class Ver2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("firstname");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("idCard");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("image");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("lastname");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("middlename");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phonenumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phonenumber");

                    b.Property<int>("Roleid")
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("className");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int")
                        .HasColumnName("semesterId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Curricolum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurricolumName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("curricolumName");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("majorId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("Curricolum", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.DetailScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<int?>("GradeComponentId")
                        .HasColumnType("int")
                        .HasColumnName("gradeComponentId");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("Mark")
                        .HasColumnType("float")
                        .HasColumnName("mark");

                    b.Property<int?>("SubjectResultId")
                        .HasColumnType("int")
                        .HasColumnName("subjectResultId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("GradeComponentId");

                    b.HasIndex("SubjectResultId");

                    b.ToTable("DetailScore", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.GradeComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FinalScoreId")
                        .HasColumnType("int")
                        .HasColumnName("finalScoreId");

                    b.Property<string>("GradeCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gradeCategory");

                    b.Property<string>("GradeItem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gradeItem");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFinal")
                        .HasColumnType("bit")
                        .HasColumnName("isFinal");

                    b.Property<short?>("MinScore")
                        .HasColumnType("smallint")
                        .HasColumnName("minScore");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subjectId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("FinalScoreId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradeComponent", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MajorCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("majorCode");

                    b.Property<string>("MajorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("majorName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Major", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Property<int>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Roleid"), 1L, 1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Roleid");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SemesterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("semesterName");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Student", b =>
                {
                    b.Property<string>("Rollnumber")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("rollnumber");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("MajorId")
                        .HasColumnType("int")
                        .HasColumnName("majorId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Rollnumber");

                    b.HasIndex("AccountId");

                    b.HasIndex("MajorId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.StudyCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Rollnumber")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("rollnumber");

                    b.Property<int?>("SubjectOfClassId")
                        .HasColumnType("int")
                        .HasColumnName("subjectOfClassId");

                    b.Property<short?>("TryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("tryTime")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rollnumber");

                    b.HasIndex("SubjectOfClassId");

                    b.ToTable("StudyCourse", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfIssues")
                        .HasColumnType("date")
                        .HasColumnName("dateOfIssues");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<short?>("NumOfCredits")
                        .HasColumnType("smallint")
                        .HasColumnName("numOfCredits");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("subjectCode");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subjectName");

                    b.Property<short?>("TermNo")
                        .HasColumnType("smallint")
                        .HasColumnName("termNo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectCurricolum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CurricolumId")
                        .HasColumnType("int")
                        .HasColumnName("curricolumId");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subjectId");

                    b.Property<short?>("TermNo")
                        .HasColumnType("smallint")
                        .HasColumnName("termNo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurricolumId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectCurricolum", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectOfClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("classId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subjectId");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacherId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectOfClass", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AverageMark")
                        .HasColumnType("float")
                        .HasColumnName("averageMark");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("note");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<int?>("StudyCourseId")
                        .HasColumnType("int")
                        .HasColumnName("studyCourseId");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedAt");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("updatedBy");

                    b.HasKey("Id");

                    b.HasIndex("StudyCourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectResult", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Teacher", b =>
                {
                    b.Property<int?>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AccountId"), 1L, 1);

                    b.Property<int>("AccountId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountId1");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("Roleid")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Class", b =>
                {
                    b.HasOne("BusinessObject.Models.Semester", "Semester")
                        .WithMany("Classes")
                        .HasForeignKey("SemesterId")
                        .HasConstraintName("FK_Class_Semester");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BusinessObject.Models.Curricolum", b =>
                {
                    b.HasOne("BusinessObject.Models.Major", "Major")
                        .WithMany("Curricolums")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FK_Curricolum_Major");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("BusinessObject.Models.DetailScore", b =>
                {
                    b.HasOne("BusinessObject.Models.GradeComponent", "GradeComponent")
                        .WithMany("DetailScores")
                        .HasForeignKey("GradeComponentId")
                        .HasConstraintName("FK_DetailScore_GradeComponent");

                    b.HasOne("BusinessObject.Models.SubjectResult", "SubjectResult")
                        .WithMany("DetailScores")
                        .HasForeignKey("SubjectResultId")
                        .HasConstraintName("FK_DetailScore_SubjectResult");

                    b.Navigation("GradeComponent");

                    b.Navigation("SubjectResult");
                });

            modelBuilder.Entity("BusinessObject.Models.GradeComponent", b =>
                {
                    b.HasOne("BusinessObject.Models.GradeComponent", "FinalScore")
                        .WithMany("InverseFinalScore")
                        .HasForeignKey("FinalScoreId")
                        .HasConstraintName("FK_GradeComponent_GradeComponent");

                    b.HasOne("BusinessObject.Models.Subject", "Subject")
                        .WithMany("GradeComponents")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_GradeComponent_Subject");

                    b.Navigation("FinalScore");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Models.Student", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Student_Account");

                    b.HasOne("BusinessObject.Models.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId")
                        .HasConstraintName("FK_Student_Major");

                    b.Navigation("Account");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("BusinessObject.Models.StudyCourse", b =>
                {
                    b.HasOne("BusinessObject.Models.Student", "RollnumberNavigation")
                        .WithMany("StudyCourses")
                        .HasForeignKey("Rollnumber")
                        .HasConstraintName("FK_StudyCourse_Student");

                    b.HasOne("BusinessObject.Models.SubjectOfClass", "SubjectOfClass")
                        .WithMany("StudyCourses")
                        .HasForeignKey("SubjectOfClassId")
                        .HasConstraintName("FK_StudyCourse_SubjectOfClass");

                    b.Navigation("RollnumberNavigation");

                    b.Navigation("SubjectOfClass");
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectCurricolum", b =>
                {
                    b.HasOne("BusinessObject.Models.Curricolum", "Curricolum")
                        .WithMany("SubjectCurricolums")
                        .HasForeignKey("CurricolumId")
                        .HasConstraintName("FK_SubjectCurricolum_Curricolum");

                    b.HasOne("BusinessObject.Models.Subject", "Subject")
                        .WithMany("SubjectCurricolums")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_SubjectCurricolum_Subject");

                    b.Navigation("Curricolum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectOfClass", b =>
                {
                    b.HasOne("BusinessObject.Models.Class", "Class")
                        .WithMany("SubjectOfClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_SubjectOfClass_Class");

                    b.HasOne("BusinessObject.Models.Subject", "Subject")
                        .WithMany("SubjectOfClasses")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_SubjectOfClass_Subject");

                    b.HasOne("BusinessObject.Models.Teacher", "Teacher")
                        .WithMany("SubjectOfClasses")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_SubjectOfClass_Account");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectResult", b =>
                {
                    b.HasOne("BusinessObject.Models.StudyCourse", "StudyCourse")
                        .WithMany("SubjectResults")
                        .HasForeignKey("StudyCourseId")
                        .HasConstraintName("FK_SubjectResult_StudyCourse");

                    b.HasOne("BusinessObject.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("StudyCourse");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Models.Teacher", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BusinessObject.Models.Class", b =>
                {
                    b.Navigation("SubjectOfClasses");
                });

            modelBuilder.Entity("BusinessObject.Models.Curricolum", b =>
                {
                    b.Navigation("SubjectCurricolums");
                });

            modelBuilder.Entity("BusinessObject.Models.GradeComponent", b =>
                {
                    b.Navigation("DetailScores");

                    b.Navigation("InverseFinalScore");
                });

            modelBuilder.Entity("BusinessObject.Models.Major", b =>
                {
                    b.Navigation("Curricolums");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Models.Semester", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObject.Models.Student", b =>
                {
                    b.Navigation("StudyCourses");
                });

            modelBuilder.Entity("BusinessObject.Models.StudyCourse", b =>
                {
                    b.Navigation("SubjectResults");
                });

            modelBuilder.Entity("BusinessObject.Models.Subject", b =>
                {
                    b.Navigation("GradeComponents");

                    b.Navigation("SubjectCurricolums");

                    b.Navigation("SubjectOfClasses");
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectOfClass", b =>
                {
                    b.Navigation("StudyCourses");
                });

            modelBuilder.Entity("BusinessObject.Models.SubjectResult", b =>
                {
                    b.Navigation("DetailScores");
                });

            modelBuilder.Entity("BusinessObject.Models.Teacher", b =>
                {
                    b.Navigation("SubjectOfClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
